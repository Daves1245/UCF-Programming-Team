#include <bits/stdc++.h>
using namespace std;
enum type {
    B = 2,
    X = 1,
    L = 0,
};
int main() {
    cin.tie(0)->sync_with_stdio(0);
    cin.exceptions(cin.failbit);
    int t; cin >> t;
    while (t--) {
        int n; cin >> n;
        /*
type:
b_i: add to current set
l_i: remove corresponding b_i from set
x_j: print out max(x_j, max of set)
r_i: ignore (we can't teleport greater than this current pos with this int.)
*/
        // value, type, b_i (if type is L) or idx (if type is X)
        using st = tuple<int, int, int>;
        vector<st> v;
        for (int i = 0; i < n; i++) {
            int l, a, b, r; cin >> l >> r >> a >> b;
            v.push_back({l, L, i});
            v.push_back({b, B, i});
        }

        int q; cin >> q;
        vector<int> ans(q);
        for (int i = 0; i < q; i++) {
            cin >> ans[i];
            v.push_back({ans[i], X, i});
        }

        sort(v.begin(), v.end(), greater<st>());
        multiset<int> s;

        cout << "events:" << endl;
        for (auto [val, type, i] : v) {
            cout << val << " " << type << " " << v << endl;
        }

        for (auto [val, type, b] : v) {
            cout << "event is " << val << " " << type << " " << b << endl;
            switch (type) {
                case X:
                    ans[b] = val;
                    cout << "processing query ans[" << b << "] = " << val << endl;
                    if (s.size()) {
                        ans[b] = max(val, *s.rbegin());
                        cout << "multiset has max " << *s.rbegin() << endl;
                    }
                    break;
                case L:
                    s.erase(ans[b]);
                    break;
                case B:
                    s.insert(ans[b]);
                    break;
            }
        }

        for (auto i : ans) cout << i << " "; cout << endl;

    }
    return 0;
}
