// bfs
const int INF 1e5;
int main() {
    // ...
    vi d(N + 1, INF); d[s] = 0;
    queue<int> q; q.push(s);

    while (!q.empty()) {
        int u = q.front(); q.pop();
        for (int j = 0; j < (int) adjlist[u].size(); j++) {
            ii v = adjlist[u][j];
            if (d[v.first] == INF) {
                d[v.first] = d[u] + 1;
                q.push(v.first);
            }
        }
    }
}
// connected components
int main() {
    int cc = 0;
    dfs_num.assign(V, UNVISITED);
    for (int i = 0; i < V; i++) {
        if (dfs_num[i] == UNVISITED) {
            printf("CC %d: ", ++cc), dfs(i), printf("\n");
        }
    }
}
// dfs.cpp
#define UNVISITED 0
#define VISITED 1
vi dfs_num(N + 10, UNVISITED);
vector<vii> adjlist(N + 10);
void dfs(int u) {
    dfs_num[u] = VISITED;
    for (int j = 0; j < adjlist[u].size(); j++) {
        ii v = adjlist[u][j];
        if (dfs_num[v.first] == UNVISITED) {
            dfs(v.first);
        }
    }
}
int main() {
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;

        adjlist[u].push_back(ii(v, UNVISITED));
        adjlist[v].push_back(ii(u, UNVISITED));
    }
    // dfs(start);
    return 0;
}
// dijkstra
vi dist(V, INF); dist[s] = 0;
priority_queue<ii, vector<ii>, greater<ii>> pq; pq.push(ii(0, s));
while (!pq.empty()) {
    ii front = pq.top(); pq.pop();
    int d = front.first, u = front.second;
    if (d > dist[u]) continue;
    for (int j = 0; j < (int) adjlist[u].size(); j++) {
        ii v = adjlist[u][j];
        if (dist[u] + v.second < dist[v.first]) {
            dist[v.first] = dist[u] + v.second;
            pq.push(ii(dist[v.first], v.first));
        }
    }
}
// floodfill
int dr[] = {1, 1, 0, -1, -1, -1, 0, 1};
int dc[] = {0, 1, 1, 1, 0, -1, -1, -1};
int floodfill(int r, int c, char c1, char c2) { // returns size
    if (r < 0 || r >= R || c < 0 || c >= C) return 0; 
    if (grid[r][c] != c1) return 0; // doesn't have color c1
    int ans = 1; // adds 1 to ans because vertex has color c1
    grid[r][c] = c2; // now recolors veretex to c2 to avoid cycling!
    for (int d = 0; d < 8; d++) {
        ans += floodfill(r + dr[d], c + dc[d], c1, c2);
    }
    return ans;
}
// floyd warshall
const int INF = 1e9; // INF = 1B, not 2^31-1 to avoid overflow
const int MAX_V = 450; // if |V| > 450, you cannot use Floyd Washall's
int AM[MAX_V][MAX_V]; // it is better to store a big array in the heap
int main() {
  int V, E; scanf("%d %d", &V, &E);
  for (int u = 0; u < V; ++u) {
    for (int v = 0; v < V; ++v)
      AM[u][v] = INF;
    AM[u][u] = 0;
  }
  for (int i = 0; i < E; ++i) {
    int u, v, w; scanf("%d %d %d", &u, &v, &w);
    AM[u][v] = w;// directed graph
  }
  for (int k = 0; k < V; ++k) // loop order is k->u->v
    for (int u = 0; u < V; ++u)
      for (int v = 0; v < V; ++v)
        AM[u][v] = min(AM[u][v], AM[u][k]+AM[k][v]);
  for (int u = 0; u < V; ++u)
    for (int v = 0; v < V; ++v)
      printf("APSP(%d, %d) = %d\n", u, v, AM[u][v]);

  return 0;
}
// kruskal
vector<pair<int, ii>> edgelist;
int mst_cost = 0;
ufds uf(V);
for (int i = 0; i < E; i++) {
    scanf("%d %d %d", &u, &v, &w);
    edgelist.push_back(make_pair(w, ii(u, v)));
}
sort(edgelist.begin(), edgelist.end());
for (int i = 0; i < E; i++) {
    pair<int, ii> front = edgelist[i];
    if (!uf.same_set(front.second.first, front.second.second)) {
        mst_cost += front.first;
        uf.union_set(front.second.first, front.second.second);
    }
}
// segtree
const int N = 1e5;
int n;
int t[2 * N];
void build() {
  for (int i = n - 1; i > 0; --i) t[i] = t[i<<1] + t[i<<1|1];
}
void modify(int p, int value) {
  for (t[p += n] = value; p > 1; p >>= 1)
      t[p>>1] = t[p] + t[p^1];
}
int query(int l, int r) {
  int res = 0;
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res += t[l++];
    if (r&1) res += t[--r];
  }
  return res;
}
// union find disjoint set
class ufds {
    public:
        vi p;
        vi rank;
        vi size;
        int num_distincts;
        ufds(int n) {
            p.resize(n); rank.resize(n); size.resize(n);
            for (int i = 0; i < n; i++) {
                rank[i] = 0;
                size[i] = 1;
                p[i] = i;
            }
            distincts = n;
        }
        int find_set(int i) {
            return (p[i] == i) ? i : (p[i] = find_set(p[i]));
        }
        bool same_set(int i, int j) {
            return find_set(i) == find_set(j);
        }
        void union_set(int i, int j) {
            int pi = find_set(i), pj = find_set(j);
            if (pi == pj) return;
            distincts--;
            size[pi] = size[pj] = size[pi] + size[pj];
            if (rank[pi] > rank[pj]) {
                p[pj] = pi;
            } else {
                p[pi] = p[pj];
                if (rank[pi] == rank[pj]) {
                    rank[pj]++;
                }
            }
        }
};
